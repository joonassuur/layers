{"version":3,"sources":["requests.js","Popup/Popup.jsx","App.jsx","reportWebVitals.js","index.jsx"],"names":["featureRequestObject","coords","WFS","writeGetFeature","baseUrl","featureNS","srsName","featurePrefix","propertyNames","featureTypes","outputFormat","filter","or","intersects","Point","within","featureRequest","a","fetch","method","body","XMLSerializer","serializeToString","response","json","console","error","Popup","data","id","className","l_aadress","ay_nimi","pind_m2","App","useState","undefined","map","setMap","popupData","setPopupData","mapElement","useRef","projection","get","vectorSource","VectorSource","vector","VectorLayer","source","style","Style","stroke","Stroke","color","width","layer","TileLayer","XYZ","url","tileGrid","TileGrid","extent","minZoom","resolutions","modifyTooltip","newPopup","Overlay","element","document","getElementById","addOverlay","setPosition","useEffect","mapObj","Map","layers","view","View","center","zoom","setTarget","current","on","event","coordinate","removeLayer","clear","newFeature","GeoJSON","readFeatures","length","responseProps","features","properties","addFeatures","addLayer","ref","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","proj4","defs","register","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.8c4a2144.chunk.js","sourcesContent":["import { WFS } from \"ol/format\";\nimport { or, intersects, within } from \"ol/format/filter\";\nimport { Point } from \"ol/geom\";\n\nconst featureRequestObject = (coords) => {\n  return new WFS().writeGetFeature({\n    baseUrl: \"https://gsavalik.envir.ee/geoserver/maaamet/ows?\",\n    featureNS: \"maaamet\",\n    srsName: \"EPSG:3301\",\n    featurePrefix: \"maaamet\",\n    propertyNames: [\"geom\", \"l_aadress\", \"pind_m2\", \"ay_nimi\"],\n    featureTypes: [\"ky_kehtiv\"],\n    outputFormat: \"application/json\",\n    filter: or(\n      intersects(\"geom\", new Point(coords)),\n      within(\"geom\", new Point(coords))\n    ),\n  });\n};\n\nconst featureRequest = async (coords) => {\n  try {\n    const response = await fetch(\n      \"https://gsavalik.envir.ee/geoserver/maaamet/ows\",\n      {\n        method: \"POST\",\n        body: new XMLSerializer().serializeToString(\n          featureRequestObject(coords)\n        ),\n      }\n    );\n    return response.json();\n  } catch (err) {\n    console.error(err);\n  }\n};\n\nexport default featureRequest;","import React from \"react\";\nimport \"./Popup.scss\";\n\nconst Popup = ({ data }) => {\n  return (\n    <div id=\"popup\">\n      {data && (\n        <>\n          <div className=\"address-field\">\n            <div className=\"address-name\">Aadress: </div>\n            <div className=\"address-value\">\n              <div>{data?.l_aadress}</div>\n              <div>{data?.ay_nimi}</div>\n            </div>\n          </div>\n          <div className=\"size-field\">\n            <div className=\"size-name\">Pindala: </div>\n            <div className=\"size-value\">{data?.pind_m2} m2</div>\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Popup;\n","import React, { useState, useRef, useEffect } from \"react\";\nimport { Map, View, Overlay } from \"ol\";\nimport { get } from \"ol/proj\";\nimport { GeoJSON } from \"ol/format\";\nimport { Stroke, Style } from \"ol/style\";\nimport { Tile as TileLayer, Vector as VectorLayer } from \"ol/layer\";\nimport TileGrid from \"ol/tilegrid/TileGrid\";\nimport VectorSource from \"ol/source/Vector\";\nimport XYZ from \"ol/source/XYZ\";\n\nimport featureRequest from \"./requests\";\n\nimport Popup from \"./Popup/Popup\";\nimport \"ol/ol.css\";\nimport \"./App.scss\";\n\nfunction App() {\n  const [map, setMap] = useState(undefined);\n  const [popupData, setPopupData] = useState(undefined);\n\n  const mapElement = useRef();\n\n  const projection = get(\"EPSG:3301\");\n\n  const vectorSource = new VectorSource();\n  const vector = new VectorLayer({\n    source: vectorSource,\n    style: new Style({\n      stroke: new Stroke({\n        color: \"rgba(0, 0, 255, 1.0)\",\n        width: 2,\n      }),\n      // fill: new Fill({\n      //   color: \"rgba(0, 0, 255, 1.0)\",\n      // }),\n    }),\n  });\n  const layer = new TileLayer({\n    source: new XYZ({\n      projection: \"EPSG:3301\",\n      url: \"https://tiles.maaamet.ee/tm/tms/1.0.0/foto/{z}/{x}/{-y}.jpg&ASUTUS=MAAAMET&KESKKOND=LIVE&IS=XGIS\",\n      tileGrid: new TileGrid({\n        extent: [40500, 5993000, 1064500, 7017000],\n        minZoom: 3,\n        resolutions: [\n          4000, 2000, 1000, 500, 250, 125, 62.5, 31.25, 15.625, 7.8125, 3.90625,\n          1.953125, 0.9765625, 0.48828125,\n        ],\n      }),\n    }),\n  });\n\n  const modifyTooltip = (coords) => {\n    const newPopup = new Overlay({\n      element: document.getElementById(\"popup\"),\n    });\n    map.addOverlay(newPopup);\n    newPopup.setPosition(coords);\n  };\n\n  useEffect(() => {\n    const mapObj = new Map({\n      layers: [layer, vector],\n      view: new View({\n        center: [550000, 6520000],\n        projection,\n        zoom: 9,\n      }),\n    });\n    setMap(mapObj);\n  }, []);\n\n  useEffect(() => {\n    const mapObj = new Map({\n      layers: [layer, vector],\n      view: new View({\n        center: [550000, 6520000],\n        projection,\n        zoom: 9,\n        minZoom: 9,\n      }),\n    });\n    mapObj.setTarget(mapElement.current);\n\n    setMap(mapObj);\n    return () => mapObj.setTarget(undefined);\n  }, []);\n\n  useEffect(() => {\n    if (map) {\n      map.on(\"click\", async (event) => {\n        const coords = event.coordinate;\n        map.removeLayer(vector);\n        vectorSource.clear();\n        const response = await featureRequest(coords);\n        const newFeature = new GeoJSON().readFeatures(response);\n        if (newFeature.length) {\n          const responseProps = response.features[0].properties;\n          const { l_aadress, pind_m2, ay_nimi } = responseProps;\n          setPopupData({ l_aadress, pind_m2, ay_nimi });\n          vectorSource.addFeatures(newFeature);\n          // zooms to vector:\n          // map.getView().fit(vectorSource.getExtent());\n          map.addLayer(vector);\n          modifyTooltip(coords);\n        } else {\n          setPopupData(undefined);\n          modifyTooltip();\n        }\n      });\n    }\n  }, [map]);\n\n  return (\n    <>\n      <Popup data={popupData}></Popup>\n      <div ref={mapElement} id=\"map\"></div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport proj4 from \"proj4\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { register } from \"ol/proj/proj4\";\n\nproj4.defs(\n  \"EPSG:3301\",\n  \"+proj=lcc+lat_1=59.33333333333334+lat_2=58+lat_0=57.51755393055556+lon_0=24+x_0=500000+y_0=6375000+ellps=GRS80+towgs84=0,0,0,0,0,0,0+units=m+no_defs\"\n);\nregister(proj4);\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}