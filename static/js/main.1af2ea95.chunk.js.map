{"version":3,"sources":["requests.ts","Popup/Popup.tsx","MapElement/MapElement.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["featureRequestObject","coords","WFS","writeGetFeature","featureNS","srsName","featurePrefix","propertyNames","featureTypes","outputFormat","filter","or","intersects","Point","within","featureRequest","a","fetch","method","body","XMLSerializer","serializeToString","response","json","console","error","Popup","data","id","className","l_aadress","ay_nimi","pind_m2","MapElement","mapElement","mapClick","ref","onClick","App","fun","initialPopupDataObj","useState","Map","map","setCoords","undefined","popupData","setPopupData","useRef","projection","get","vectorSource","useMemo","VectorSource","vector","VectorLayer","source","style","Style","stroke","Stroke","color","width","zIndex","view","View","center","zoom","minZoom","tileLayer","TileLayer","XYZ","url","tileGrid","TileGrid","extent","resolutions","imageLayer","ImageLayer","ImageWMS","params","LAYERS","VERSION","modifyTooltip","newPopup","Overlay","element","document","getElementById","addOverlay","setPosition","activateLayer","layer","getLayers","getArray","forEach","constructor","name","removeLayer","addLayer","setTarget","current","setView","useEffect","on","event","coordinate","clear","handleMapClick","newFeature","GeoJSON","readFeatures","length","responseProps","features","properties","addFeatures","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","proj4","defs","register","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.1af2ea95.chunk.js","sourcesContent":["import { WFS } from \"ol/format\";\r\nimport { or, intersects, within } from \"ol/format/filter\";\r\nimport { Point } from \"ol/geom\";\r\n\r\nconst featureRequestObject = (coords: number[]) => {\r\n  return new WFS().writeGetFeature({\r\n    featureNS: \"https://gsavalik.envir.ee/geoserver/maaamet/ows?\",\r\n    srsName: \"EPSG:3301\",\r\n    featurePrefix: \"maaamet\",\r\n    propertyNames: [\"geom\", \"l_aadress\", \"pind_m2\", \"ay_nimi\"],\r\n    featureTypes: [\"ky_kehtiv\"],\r\n    outputFormat: \"application/json\",\r\n    filter: or(\r\n      intersects(\"geom\", new Point(coords)),\r\n      within(\"geom\", new Point(coords))\r\n    ),\r\n  });\r\n};\r\n\r\nconst featureRequest = async (coords: number[]) => {\r\n  try {\r\n    const response = await fetch(\r\n      \"https://gsavalik.envir.ee/geoserver/maaamet/ows\",\r\n      {\r\n        method: \"POST\",\r\n        body: new XMLSerializer().serializeToString(\r\n          featureRequestObject(coords)\r\n        ),\r\n      }\r\n    );\r\n    return response.json();\r\n  } catch (err) {\r\n    console.error(err);\r\n  }\r\n};\r\n\r\nexport default featureRequest;\r\n","import React from \"react\";\r\nimport \"./Popup.scss\";\r\n\r\ninterface DataObj {\r\n  l_aadress?: string;\r\n  ay_nimi?: string;\r\n  pind_m2?: string;\r\n}\r\ninterface Props {\r\n  data: DataObj;\r\n}\r\n\r\nconst Popup: React.FC<Props> = ({ data }) => {\r\n  return (\r\n    <div id=\"popup\">\r\n      <div className=\"address-field\">\r\n        <div className=\"address-name\">{data?.l_aadress && \"Aadress:\"}</div>\r\n        <div className=\"address-value\">\r\n          <div>{data?.l_aadress}</div>\r\n          <div>{data?.ay_nimi}</div>\r\n        </div>\r\n      </div>\r\n      <div className=\"size-field\">\r\n        <div className=\"size-name\">{data?.pind_m2 && \"Pindala:\"}</div>\r\n        <div className=\"size-value\">\r\n          {data?.pind_m2 && `${data?.pind_m2} m2`}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Popup;\r\n","import React from \"react\";\r\n\r\ninterface Props {\r\n  mapElement: React.Ref<HTMLDivElement>;\r\n  mapClick: React.MouseEventHandler<HTMLDivElement>;\r\n}\r\nconst MapElement: React.FC<Props> = ({ mapElement, mapClick }) => {\r\n  return <div ref={mapElement} id=\"map\" onClick={mapClick}></div>;\r\n};\r\n\r\nexport default MapElement;\r\n","import React, { useState, useRef, useEffect, useMemo } from \"react\";\r\nimport { Map, View, Overlay } from \"ol\";\r\nimport { get } from \"ol/proj\";\r\nimport { GeoJSON } from \"ol/format\";\r\nimport { Stroke, Style } from \"ol/style\";\r\nimport { Tile as TileLayer, Vector as VectorLayer } from \"ol/layer\";\r\nimport TileGrid from \"ol/tilegrid/TileGrid\";\r\nimport VectorSource from \"ol/source/Vector\";\r\nimport XYZ from \"ol/source/XYZ\";\r\nimport ImageWMS from \"ol/source/ImageWMS\";\r\nimport { Image as ImageLayer } from \"ol/layer\";\r\n\r\nimport featureRequest from \"./requests\";\r\n\r\nimport Popup from \"./Popup/Popup\";\r\nimport MapElement from \"./MapElement/MapElement\";\r\n\r\nimport \"ol/ol.css\";\r\nimport \"./App.scss\";\r\n\r\nconst App: React.FC = () => {\r\n  const initialPopupDataObj = {\r\n    l_aadress: \"\",\r\n    ay_nimi: \"\",\r\n    pind_m2: \"\",\r\n  };\r\n  const [map] = useState(new Map({}));\r\n  const [coords, setCoords] = useState<number[]>([]);\r\n  const [popupData, setPopupData] = useState(initialPopupDataObj || undefined);\r\n\r\n  const mapElement = useRef<HTMLDivElement>(null);\r\n  const projection = get(\"EPSG:3301\");\r\n\r\n  const vectorSource = useMemo(() => new VectorSource(), []);\r\n  const vector = useMemo(\r\n    () =>\r\n      new VectorLayer({\r\n        source: vectorSource,\r\n        style: new Style({\r\n          stroke: new Stroke({\r\n            color: \"rgba(0, 0, 255, 1.0)\",\r\n            width: 2,\r\n          }),\r\n        }),\r\n        zIndex: 1,\r\n      }),\r\n    [vectorSource]\r\n  );\r\n  const view = new View({\r\n    center: [550000, 6520000],\r\n    projection,\r\n    zoom: 9,\r\n    minZoom: 9,\r\n  });\r\n  const tileLayer = new TileLayer({\r\n    source: new XYZ({\r\n      projection: \"EPSG:3301\",\r\n      url: \"https://tiles.maaamet.ee/tm/tms/1.0.0/foto/{z}/{x}/{-y}.jpg&ASUTUS=MAAAMET&KESKKOND=LIVE&IS=XGIS\",\r\n      tileGrid: new TileGrid({\r\n        extent: [40500, 5993000, 1064500, 7017000],\r\n        minZoom: 3,\r\n        resolutions: [\r\n          4000, 2000, 1000, 500, 250, 125, 62.5, 31.25, 15.625, 7.8125, 3.90625,\r\n          1.953125, 0.9765625, 0.48828125,\r\n        ],\r\n      }),\r\n    }),\r\n  });\r\n  const imageLayer = new ImageLayer({\r\n    source: new ImageWMS({\r\n      url: \"http://kaart.maaamet.ee/wms/alus?\",\r\n      params: {\r\n        LAYERS: \"MA-ALUS\",\r\n        VERSION: \"1.1.1\",\r\n      },\r\n    }),\r\n  });\r\n\r\n  const modifyTooltip = (coords?: number[]) => {\r\n    const newPopup = new Overlay({\r\n      element: document.getElementById(\"popup\") || undefined,\r\n    });\r\n    map.addOverlay(newPopup);\r\n    if (coords) {\r\n      newPopup.setPosition(coords);\r\n    }\r\n  };\r\n\r\n  const initMap = () => {\r\n    map.setTarget(mapElement.current || \"\");\r\n    map.addLayer(tileLayer);\r\n    map.setView(view);\r\n    return () => map.setTarget(\"\");\r\n  };\r\n\r\n  const removeLayers = () => {\r\n    const layers = [...map.getLayers().getArray()];\r\n    layers.forEach((layer) => {\r\n      if (layer.constructor.name !== \"VectorLayer\") {\r\n        map.removeLayer(layer);\r\n      }\r\n    });\r\n  };\r\n\r\n  const activateLayer = (\r\n    layer: ImageLayer<ImageWMS> | TileLayer<XYZ>\r\n  ): void => {\r\n    removeLayers();\r\n    map.addLayer(layer);\r\n  };\r\n\r\n  const useMountEffect = (fun: React.EffectCallback) => useEffect(fun, []);\r\n  useMountEffect(initMap);\r\n\r\n  useEffect(() => {\r\n    map.on(\"click\", async (event) => {\r\n      setCoords(event.coordinate);\r\n      map.removeLayer(vector);\r\n      vectorSource.clear();\r\n    });\r\n  }, [map, setCoords, vector, vectorSource]);\r\n\r\n  const handleMapClick = async () => {\r\n    const response = await featureRequest(coords);\r\n    const newFeature = new GeoJSON().readFeatures(response);\r\n    if (newFeature.length) {\r\n      const responseProps = response.features[0].properties;\r\n      const { l_aadress, pind_m2, ay_nimi } = responseProps;\r\n      setPopupData({ l_aadress, pind_m2, ay_nimi });\r\n      vectorSource.addFeatures(newFeature);\r\n      // zooms to vector:\r\n      // map.getView().fit(vectorSource.getExtent());\r\n      map.addLayer(vector);\r\n      modifyTooltip(coords);\r\n    } else {\r\n      setPopupData(initialPopupDataObj);\r\n      modifyTooltip();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"button-overlay\">\r\n        <button onClick={() => activateLayer(imageLayer)}>image layer</button>\r\n        <button onClick={() => activateLayer(tileLayer)}>tile layer</button>\r\n      </div>\r\n      <Popup data={popupData}></Popup>\r\n      <MapElement mapElement={mapElement} mapClick={()=>handleMapClick()}></MapElement>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.scss\";\r\nimport App from \"./App\";\r\nimport proj4 from \"proj4\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { register } from \"ol/proj/proj4\";\r\n\r\nproj4.defs(\r\n  \"EPSG:3301\",\r\n  \"+proj=lcc+lat_1=59.33333333333334+lat_2=58+lat_0=57.51755393055556+lon_0=24+x_0=500000+y_0=6375000+ellps=GRS80+towgs84=0,0,0,0,0,0,0+units=m+no_defs\"\r\n);\r\nregister(proj4);\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}