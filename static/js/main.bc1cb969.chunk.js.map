{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","undefined","map","setMap","popup","setPopup","mapElement","useRef","projection","get","vectorSource","VectorSource","vector","VectorLayer","source","style","Style","stroke","Stroke","color","width","fill","Fill","layer","TileLayer","XYZ","url","tileGrid","TileGrid","extent","minZoom","resolutions","useEffect","mapObj","Map","layers","view","View","center","zoom","setTarget","current","on","e","coords","coordinate","featureRequest","WFS","writeGetFeature","baseUrl","featureNS","srsName","featurePrefix","propertyNames","featureTypes","outputFormat","filter","or","intersects","Point","within","fetch","method","body","XMLSerializer","serializeToString","then","response","json","removeLayer","clear","newFeature","GeoJSON","readFeatures","addFeatures","getView","fit","getExtent","addLayer","newPopup","Overlay","element","document","getElementById","addOverlay","address","features","properties","l_aadress","setPosition","id","ref","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","proj4","defs","register","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.bc1cb969.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport \"ol/ol.css\";\nimport \"./App.css\";\nimport { Map, View, Overlay } from \"ol\";\nimport { get } from \"ol/proj\";\nimport { GeoJSON, WFS } from \"ol/format\";\nimport { Stroke, Style, Fill } from \"ol/style\";\nimport { toStringXY, toStringHDMS } from \"ol/coordinate\";\nimport { transform } from \"ol/proj\";\nimport { add } from \"ol/coordinate\";\nimport { Point, Polygon } from \"ol/geom\";\nimport {\n  Image as ImageLayer,\n  Tile as TileLayer,\n  Vector as VectorLayer,\n} from \"ol/layer\";\nimport {\n  and as andFilter,\n  equalTo as equalToFilter,\n  like as likeFilter,\n  or,\n  intersects,\n  within,\n  contains,\n} from \"ol/format/filter\";\nimport TileGrid from \"ol/tilegrid/TileGrid\";\nimport { bbox as bboxStrategy } from \"ol/loadingstrategy\";\nimport VectorSource from \"ol/source/Vector\";\nimport OSMXML from \"ol/format/OSMXML\";\nimport XYZ from \"ol/source/XYZ\";\n\nfunction App() {\n  const [map, setMap] = useState(undefined);\n  const [popup, setPopup] = useState();\n\n  const mapElement = useRef();\n\n  const projection = get(\"EPSG:3301\");\n\n  const vectorSource = new VectorSource();\n  const vector = new VectorLayer({\n    source: vectorSource,\n    style: new Style({\n      stroke: new Stroke({\n        color: \"rgba(0, 0, 255, 1.0)\",\n        width: 2,\n      }),\n      fill: new Fill({\n        color: \"rgba(0, 0, 255, 1.0)\",\n      }),\n    }),\n  });\n  const layer = new TileLayer({\n    source: new XYZ({\n      projection: \"EPSG:3301\",\n      url: \"https://tiles.maaamet.ee/tm/tms/1.0.0/foto/{z}/{x}/{-y}.jpg&ASUTUS=MAAAMET&KESKKOND=LIVE&IS=XGIS\",\n      tileGrid: new TileGrid({\n        extent: [40500, 5993000, 1064500, 7017000],\n        minZoom: 3,\n        resolutions: [\n          4000, 2000, 1000, 500, 250, 125, 62.5, 31.25, 15.625, 7.8125, 3.90625,\n          1.953125, 0.9765625, 0.48828125,\n        ],\n      }),\n    }),\n  });\n\n  useEffect(() => {\n    const mapObj = new Map({\n      layers: [layer, vector],\n      view: new View({\n        center: [550000, 6520000],\n        projection,\n        zoom: 9,\n      }),\n    });\n    setMap(mapObj);\n  }, []);\n\n  useEffect(() => {\n    const mapObj = new Map({\n      layers: [layer, vector],\n      view: new View({\n        center: [550000, 6520000],\n        projection,\n        zoom: 9,\n      }),\n    });\n    mapObj.setTarget(mapElement.current);\n\n    setMap(mapObj);\n    return () => mapObj.setTarget(undefined);\n  }, []);\n\n  useEffect(() => {\n    if (map) {\n      map.on(\"click\", (e) => {\n        const coords = e.coordinate;\n        const featureRequest = new WFS().writeGetFeature({\n          baseUrl: \"https://gsavalik.envir.ee/geoserver/maaamet/ows?\",\n          featureNS: \"maaamet\",\n          srsName: \"EPSG:3301\",\n          featurePrefix: \"maaamet\",\n          propertyNames: [\"geom\", \"l_aadress\", \"pind_m2\"],\n          featureTypes: [\"ky_kehtiv\"],\n          outputFormat: \"application/json\",\n          filter: or(\n            intersects(\"geom\", new Point(coords)),\n            within(\"geom\", new Point(coords))\n          ),\n        });\n\n        fetch(\"https://gsavalik.envir.ee/geoserver/maaamet/ows\", {\n          method: \"POST\",\n          body: new XMLSerializer().serializeToString(featureRequest),\n        })\n          .then(function (response) {\n            return response.json();\n          })\n          .then(function (json) {\n            // const featureId = json.features[0].id\n            // const checkIfFeatureExists = vector.getSource().getFeatures(featureId);\n            map.removeLayer(vector);\n            vectorSource.clear();\n            const newFeature = new GeoJSON().readFeatures(json);\n            vectorSource.addFeatures(newFeature);\n            map.getView().fit(vectorSource.getExtent());\n            map.addLayer(vector);\n            const newPopup = new Overlay({\n              element: document.getElementById(\"popup\"),\n            });\n            \n            map.addOverlay(newPopup);\n            const address = json.features[0].properties.l_aadress;\n            newPopup.setPosition(e.coordinate);\n            setPopup({ address });\n          });\n      });\n    }\n  }, [map]);\n\n  return (\n    <>\n      {\n        <div id=\"popup\">\n          <div>{popup?.address}</div>\n        </div>\n      }\n      <div ref={mapElement} id=\"map\"></div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport proj4 from \"proj4\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { register } from \"ol/proj/proj4\";\n\nproj4.defs(\n  \"EPSG:3301\",\n  \"+proj=lcc+lat_1=59.33333333333334+lat_2=58+lat_0=57.51755393055556+lon_0=24+x_0=500000+y_0=6375000+ellps=GRS80+towgs84=0,0,0,0,0,0,0+units=m+no_defs\"\n);\nregister(proj4);\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}