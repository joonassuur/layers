{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","map","setMap","mapElement","useRef","current","projection","get","vectorSource","VectorSource","url","extent","join","format","GeoJSON","dataProjection","strategy","bboxStrategy","vector","VectorLayer","source","style","Style","stroke","Stroke","color","width","layer","TileLayer","XYZ","tileGrid","TileGrid","minZoom","resolutions","useEffect","newMap","Map","target","layers","view","View","center","zoom","ref","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","proj4","defs","register","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8UAuFeA,MApEf,WACE,MAAsBC,qBAAtB,mBAAOC,EAAP,KAAYC,EAAZ,KAEMC,EAAaC,mBACnBD,EAAWE,QAAUJ,EAErB,IAAMK,EAAaC,YAAI,aAEjBC,EAAe,IAAIC,IAAa,CACpCC,IAAK,SAASC,GACZ,MACE,wOAQAA,EAAOC,KAAK,KACZ,cAGJC,OAAQ,IAAIC,IAAQ,CAAEC,eAAgB,cACtCC,SAAUC,MAENC,EAAS,IAAIC,IAAY,CAC7BC,OAAQZ,EACRa,MAAO,IAAIC,IAAM,CACfC,OAAQ,IAAIC,IAAO,CACjBC,MAAO,uBACPC,MAAO,QAIPC,EAAQ,IAAIC,IAAU,CAC1BR,OAAQ,IAAIS,IAAI,CACdvB,WAAY,YACZI,IAAK,mGACLoB,SAAU,IAAIC,IAAS,CACrBpB,OAAQ,CAAC,MAAO,OAAS,QAAS,QAClCqB,QAAS,EACTC,YAAa,CACX,IAAM,IAAM,IAAM,IAAK,IAAK,IAAK,KAAM,MAAO,OAAQ,OAAQ,QAC9D,SAAU,SAAW,iBAqB7B,OAfAC,qBAAU,WACR,IAAKjC,EAAK,CACR,IAAMkC,EAAS,IAAIC,IAAI,CACrBC,OAAQ,MACRC,OAAQ,CAACX,EAAOT,GAChBqB,KAAM,IAAIC,IAAK,CACbC,OAAQ,CAAC,KAAQ,OACjBnC,aACAoC,KAAM,OAGVxC,EAAOiC,MAER,CAAClC,EAAKC,EAAQI,EAAYY,EAAQS,IAE9B,qBAAKgB,IAAKxC,EAAYyC,GAAG,S,QCxEnBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,QCCdQ,IAAMC,KACJ,YACA,wJAEFC,YAASF,KAETG,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BhB,M","file":"static/js/main.c2ec6287.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport \"ol/ol.css\";\nimport \"./App.css\";\nimport { Map, View } from \"ol\";\nimport { get } from \"ol/proj\";\nimport GeoJSON from \"ol/format/GeoJSON\";\nimport ImageWMS from \"ol/source/ImageWMS\";\nimport { Stroke, Style } from \"ol/style\";\nimport {\n  Image as ImageLayer,\n  Tile as TileLayer,\n  Vector as VectorLayer,\n} from \"ol/layer\";\nimport TileGrid from \"ol/tilegrid/TileGrid\";\nimport { bbox as bboxStrategy } from \"ol/loadingstrategy\";\nimport VectorSource from \"ol/source/Vector\";\nimport OSMXML from \"ol/format/OSMXML\";\nimport XYZ from \"ol/source/XYZ\";\n\nfunction App() {\n  const [map, setMap] = useState();\n\n  const mapElement = useRef();\n  mapElement.current = map;\n\n  const projection = get(\"EPSG:3301\");\n\n  const vectorSource = new VectorSource({\n    url: function(extent) {\n      return (\n        \"https://gsavalik.envir.ee/geoserver/maaamet/ows?\" +\n        \"service=WFS&version=1.0.0&request=GetFeature&\" +\n        \"typeName=ky_kehtiv&\" +\n        \"featurePrefix=maaamet&\" +\n        \"geometryPropertyName=geom&\" +\n        \"maxfeatures=100&\" +\n        \"outputFormat=application/json&srsname=EPSG:3301&\" +\n        'bbox=' +\n        extent.join(\",\") +\n        \",EPSG:3301\"\n      );\n    },\n    format: new GeoJSON({ dataProjection: \"EPSG:3301\" }),\n    strategy: bboxStrategy,\n  });\n  const vector = new VectorLayer({\n    source: vectorSource,\n    style: new Style({\n      stroke: new Stroke({\n        color: \"rgba(0, 0, 255, 1.0)\",\n        width: 2,\n      }),\n    }),\n  });\n  const layer = new TileLayer({\n    source: new XYZ({\n      projection: \"EPSG:3301\",\n      url: \"https://tiles.maaamet.ee/tm/tms/1.0.0/foto/{z}/{x}/{-y}.jpg&ASUTUS=MAAAMET&KESKKOND=LIVE&IS=XGIS\",\n      tileGrid: new TileGrid({\n        extent: [40500, 5993000, 1064500, 7017000],\n        minZoom: 3,\n        resolutions: [\n          4000, 2000, 1000, 500, 250, 125, 62.5, 31.25, 15.625, 7.8125, 3.90625,\n          1.953125, 0.9765625, 0.48828125,\n        ],\n      }),\n    }),\n  });\n\n  useEffect(() => {\n    if (!map) {\n      const newMap = new Map({\n        target: \"map\",\n        layers: [layer, vector],\n        view: new View({\n          center: [550000, 6520000],\n          projection,\n          zoom: 10,\n        }),\n      });\n      setMap(newMap);\n    }\n  }, [map, setMap, projection, vector, layer]);\n\n  return <div ref={mapElement} id=\"map\"></div>;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport proj4 from \"proj4\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { register } from \"ol/proj/proj4\";\n\nproj4.defs(\n  \"EPSG:3301\",\n  \"+proj=lcc+lat_1=59.33333333333334+lat_2=58+lat_0=57.51755393055556+lon_0=24+x_0=500000+y_0=6375000+ellps=GRS80+towgs84=0,0,0,0,0,0,0+units=m+no_defs\"\n);\nregister(proj4);\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}